@page "/locationdata"

@using threemillion.Data
@using System.Diagnostics

@using ReactClient
@using Grpc.Core
@inject ReactClient.LocationData.LocationDataClient LocationDataClient

@inject IJSRuntime JSRuntime;
@using Microsoft.AspNetCore.Components.Web.Virtualization;

    <table class="tableAction">
            <tbody>
                    <tr>
                        <td>
                            <div class="data-input">
        <label for="dataLimit">No of records to fetch</label>
        <input id="dataLimit" type="number" @bind="_dataLimit"/>
        <button @onclick="FetchData" class="btn-submit">Submit</button>
    </div>
                        </td>
                        <td>
    <p class="info">
        Total records: <span class="count">@_locations.Count</span>
    </p>
    <p class="info">
        Time taken: <span class="time">@_watch.ElapsedMilliseconds</span> milliseconds
    </p>
                        </td>
                    </tr>
            </tbody>
        </table>
    
    <div class="tableFixHead">
        <table class="table">
            <thead>
                <tr>
                    <th>Longitude</th>
                    <th>Latitude</th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="@_locations" Context="locations">
                    <tr>
                        <td>@locations.Longitude</td>
                        <td>@locations.Latitude</td>
                    </tr>
                </Virtualize>
            </tbody>
        </table>
    </div>

@code {
    private int _dataLimit = 100;
    private List<Location> _locations = new List<Location>();
    Stopwatch _watch = new Stopwatch();

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    private async Task FetchData()
    {
        _locations.Clear();
        
        _watch.Reset();

        await MarkStateChanged();
        
        _watch.Start();

        using (var call = LocationDataClient.GetLocationData(new GetLocationRequest { DataLimit = _dataLimit }))
        {
            await foreach (var response in call.ResponseStream.ReadAllAsync())
            {
                _locations.Add(new Location { Longitude = response.LongitudeE7, Latitude = response.LatitudeE7 });
            }
        }

        _watch.Stop();
        
        await MarkStateChanged();
    }

    private async Task MarkStateChanged()
    {
         await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}