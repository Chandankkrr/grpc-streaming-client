@page "/mapbox"

@using Grpc.Core
@using ReactClient
@using System.Diagnostics

@inject IJSRuntime _jsRuntime;
@inject IHttpClientFactory _clientFactory
@inject ReactClient.LocationData.LocationDataClient _locationDataClient

<table class="tableAction">
    <tbody>
    <tr>
        <td>
            <div class="data-input">
                <label for="dataLimit">No of records to fetch</label>
                <input id="dataLimit" type="number" @bind="_dataLimit"/>
                <button @onclick="FetchDataAndUpdateMap" class="btn-submit">Load data</button>
            </div>
        </td>
        <td>
            <p class="info">
                Total records: <span class="count">@_locations.Count.ToString()</span>
            </p>
            <p class="info">
                Time taken: <span class="time">@_stopWatch.ElapsedMilliseconds.ToString()</span> milliseconds
            </p>
        </td>
    </tr>
    </tbody>
</table>

<div id="map" style="width: 100%; height: 90vh;"></div>

@code {
    private int _dataLimit = 1000;

    private readonly List<object> _locations = new();

    private readonly Stopwatch _stopWatch = new();

    private static Func<Task> _func;

    protected override void OnInitialized()
    {
        _func = FetchDataAndUpdateMap;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await _jsRuntime.InvokeVoidAsync("mapBoxFunctions.initMapBox");
    }

    [JSInvokable]
    public static void LoadClusterData()
    {
        _func.Invoke();
    }

    private async Task FetchDataAndUpdateMap()
    {
        ResetState();

        _stopWatch.Start();

        using var call = _locationDataClient.GetLocations(
            new GetLocationsRequest
            {
                DataLimit = _dataLimit
            });
        
        await foreach (var response in call.ResponseStream.ReadAllAsync())
        {
            var pow = Math.Pow(10, 7);
            var longitude = response.LongitudeE7 / pow;
            var latitude = response.LatitudeE7 / pow;

            _locations.Add(new
            {
                type = "Feature",
                geometry = new
                {
                    type = "Point",
                    coordinates = new[] { longitude, latitude }
                }
            });

            StateHasChanged();
        }

        _stopWatch.Stop();

        await _jsRuntime.InvokeVoidAsync("mapBoxFunctions.addClusterData", _locations);
    }

    private void ResetState()
    {
        _locations.Clear();

        _stopWatch.Reset();

        StateHasChanged();
    }

}